--!nocheck

local Debris = game:GetService("Debris")
local Players = game:GetService("Players")
local RF = game:GetService("ReplicatedFirst")
local RunService = game:GetService("RunService")
local SG = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local plr = Players.LocalPlayer

local function initGame()
    RF:RemoveDefaultLoadingScreen()

    SG:SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
    SG:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
end
initGame()

local function setupUI()
    --- auto-generated by `Condify`
    local loadingScreen = Instance.new("ScreenGui")
    loadingScreen.Name = "LoadingScreen"
    loadingScreen.DisplayOrder = 999
    loadingScreen.IgnoreGuiInset = true
    loadingScreen.ScreenInsets = Enum.ScreenInsets.None
    loadingScreen.ResetOnSpawn = false
    loadingScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local bG = Instance.new("Frame")
    bG.Name = "BG"
    bG.AnchorPoint = Vector2.new(0.5, 0.5)
    bG.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    bG.BorderColor3 = Color3.fromRGB(0, 0, 0)
    bG.BorderSizePixel = 0
    bG.Position = UDim2.fromScale(0.5, 0.5)
    bG.Size = UDim2.fromScale(1, 1)

    local mapImage = Instance.new("ImageLabel")
    mapImage.Name = "MapImage"
    mapImage.Image = ""
    mapImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    mapImage.BackgroundTransparency = 1
    mapImage.BorderColor3 = Color3.fromRGB(0, 0, 0)
    mapImage.BorderSizePixel = 0
    mapImage.Size = UDim2.fromScale(1, 1)
    mapImage.Parent = bG

    bG.Parent = loadingScreen

    local bottom = Instance.new("Frame")
    bottom.Name = "Bottom"
    bottom.AnchorPoint = Vector2.new(0.5, 1)
    bottom.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    bottom.BackgroundTransparency = 1
    bottom.BorderColor3 = Color3.fromRGB(0, 0, 0)
    bottom.BorderSizePixel = 0
    bottom.Position = UDim2.fromScale(0.5, 1)
    bottom.Size = UDim2.fromScale(1, 0.1)
    bottom.ZIndex = 2

    local aLeft = Instance.new("Frame")
    aLeft.Name = "A-Left"
    aLeft.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    aLeft.BorderColor3 = Color3.fromRGB(0, 0, 0)
    aLeft.BorderSizePixel = 0
    aLeft.Size = UDim2.fromScale(0.3, 1)

    local mapName = Instance.new("TextLabel")
    mapName.Name = "MapName"
    mapName.FontFace = Font.new(
        "rbxasset://fonts/families/Nunito.json",
        Enum.FontWeight.Bold,
        Enum.FontStyle.Normal
    )
    mapName.Text = "Loading..."
    mapName.TextColor3 = Color3.fromRGB(255, 255, 255)
    mapName.TextScaled = true
    mapName.TextSize = 14
    mapName.TextWrapped = true
    mapName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    mapName.BackgroundTransparency = 1
    mapName.BorderColor3 = Color3.fromRGB(0, 0, 0)
    mapName.BorderSizePixel = 0
    mapName.Size = UDim2.fromScale(0.9, 0.7)

    local uIGradient = Instance.new("UIGradient")
    uIGradient.Name = "UIGradient"
    uIGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(252, 227, 138)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(243, 129, 129)),
    })
    uIGradient.Parent = mapName

    local authorName = Instance.new("TextLabel")
    authorName.Name = "AuthorName"
    authorName.FontFace = Font.new(
        "rbxasset://fonts/families/Nunito.json",
        Enum.FontWeight.Bold,
        Enum.FontStyle.Normal
    )
    authorName.Text = "Loading..."
    authorName.TextColor3 = Color3.fromRGB(255, 255, 255)
    authorName.TextScaled = true
    authorName.TextSize = 14
    authorName.TextWrapped = true
    authorName.TextXAlignment = Enum.TextXAlignment.Left
    authorName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    authorName.BackgroundTransparency = 1
    authorName.BorderColor3 = Color3.fromRGB(0, 0, 0)
    authorName.BorderSizePixel = 0
    authorName.Position = UDim2.fromScale(0, -1.2)
    authorName.Size = UDim2.fromScale(1, 0.6)
    authorName.Parent = mapName

    mapName.Parent = aLeft

    local uIListLayout = Instance.new("UIListLayout")
    uIListLayout.Name = "UIListLayout"
    uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    uIListLayout.Parent = aLeft

    local uIStroke = Instance.new("UIStroke")
    uIStroke.Name = "UIStroke"
    uIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uIStroke.Color = Color3.fromRGB(255, 255, 255)
    uIStroke.Thickness = 4

    local uIGradient1 = Instance.new("UIGradient")
    uIGradient1.Name = "UIGradient"
    uIGradient1.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(252, 227, 138)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(243, 129, 129)),
    })
    uIGradient1.Parent = uIStroke

    uIStroke.Parent = aLeft

    aLeft.Parent = bottom

    local uIListLayout1 = Instance.new("UIListLayout")
    uIListLayout1.Name = "UIListLayout"
    uIListLayout1.FillDirection = Enum.FillDirection.Horizontal
    uIListLayout1.VerticalAlignment = Enum.VerticalAlignment.Bottom
    uIListLayout1.Parent = bottom

    local bLoadingBar = Instance.new("Frame")
    bLoadingBar.Name = "B-LoadingBar"
    bLoadingBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    bLoadingBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
    bLoadingBar.BorderSizePixel = 0
    bLoadingBar.Size = UDim2.fromScale(0.1, 0.1)

    local uIGradient2 = Instance.new("UIGradient")
    uIGradient2.Name = "UIGradient"
    uIGradient2.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(243, 129, 129)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(252, 227, 138)),
    })
    uIGradient2.Parent = bLoadingBar

    bLoadingBar.Parent = bottom

    local uIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
    uIAspectRatioConstraint.Name = "UIAspectRatioConstraint"
    uIAspectRatioConstraint.AspectRatio = 25.627
    uIAspectRatioConstraint.Parent = bottom

    bottom.Parent = loadingScreen

    loadingScreen.Parent = plr.PlayerGui

    --- apply info
    repeat task.wait() until workspace:WaitForChild("Map", 999)

    local setting = workspace.Map:WaitForChild("Settings") :: Configuration
    local mainSettings = setting.Main :: Configuration
    local mapNameConfig = mainSettings:GetAttribute("Name") or "?"
    local mapImageConfig = mainSettings:GetAttribute("Image") or ""
    local creator = mainSettings:GetAttribute("Creator") or "?"

    mapName.Text = mapNameConfig
    mapImage.Image = "rbxassetid://"..mapImageConfig
    authorName.Text = creator

    repeat RunService.RenderStepped:Wait() until workspace.Map:GetAttribute("IsLoaded")

    local transitionTween = TweenInfo.new(1)
    TweenService:Create(bLoadingBar, transitionTween, { Size = UDim2.fromScale(1, 0.1) }):Play()
    TweenService:Create(mapImage, transitionTween, { ImageTransparency = 1 }):Play()
    TweenService:Create(bG, transitionTween, { BackgroundTransparency = 1 }):Play()

    Debris:AddItem(loadingScreen, 1)
    Debris:AddItem(script, 2)
end
setupUI()
