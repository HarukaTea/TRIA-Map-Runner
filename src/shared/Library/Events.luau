--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.23 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		TeleportPlayer = table.freeze({
			SetCallback = noop
		}),
		RequestToForceReset = table.freeze({
			Fire = noop
		}),
		MapRoundEnding = table.freeze({
			SetCallback = noop
		}),
		CreateHint = table.freeze({
			On = noop
		}),
		ChangeMusic = table.freeze({
			Fire = noop
		}),
		ChangeLighting = table.freeze({
			Fire = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("Fallen")

local reliable = remotes:WaitForChild("Haruka_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected Haruka_RELIABLE to be a RemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(3)
local reliable_event_queue: { [number]: { any } } = table.create(3)
reliable_event_queue[1] = {}
reliable_event_queue[2] = 0
reliable_events[0] = {}
reliable_event_queue[0] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value["Player"] = incoming_inst[incoming_ipos]
				assert(value["Player"] == nil or value["Player"]:IsA("Player"), "received instance is not of the Player class!")
			else
				value["Player"] = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
				local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
				local angle_1 = axisangle_1.Magnitude
				if angle_1 ~= 0 then
					value["Destination"] = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
				else
					value["Destination"] = CFrame.new(pos_1)
				end
			else
				value["Destination"] = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value["FaceFront"] = buffer.readu8(incoming_buff, read(1)) == 1
			else
				value["FaceFront"] = nil
			end
			if reliable_events[1] then
				task.spawn(reliable_events[1], value)
			else
				table.insert(reliable_event_queue[1], value)
				if #reliable_event_queue[1] > 64 then
					warn(`[ZAP] {#reliable_event_queue[1]} events in queue for TeleportPlayer. Did you forget to attach a listener?`)
				end
			end
		elseif id == 2 then
			local value
			if reliable_events[2] then
				task.spawn(reliable_events[2], value)
			else
				reliable_event_queue[2] += 1
				if reliable_event_queue[2] > 16 then
					warn(`[ZAP] {reliable_event_queue[2]} events in queue for MapRoundEnding. Did you forget to attach a listener?`)
				end
			end
		elseif id == 0 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				local len_1 = buffer.readu16(incoming_buff, read(2))
				value["Hint"] = buffer.readstring(incoming_buff, read(len_1), len_1)
			else
				value["Hint"] = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value["Color"] = incoming_inst[incoming_ipos]
			else
				value["Color"] = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				local len_2 = buffer.readu16(incoming_buff, read(2))
				value["Duration"] = buffer.readstring(incoming_buff, read(len_2), len_2)
			else
				value["Duration"] = nil
			end
			if reliable_events[0][1] then
				for _, cb in reliable_events[0] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[0], value)
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for CreateHint. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	TeleportPlayer = {
		SetCallback = function(Callback: (Value: ({
			["Player"]: ((Player)?),
			["Destination"]: ((CFrame)?),
			["FaceFront"]: ((boolean)?),
		})) -> ()): () -> ()
			reliable_events[1] = Callback
			for _, value in reliable_event_queue[1] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[1] = {}
			return function()
				reliable_events[1] = nil
			end
		end,
	},
	RequestToForceReset = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
		end,
	},
	MapRoundEnding = {
		SetCallback = function(Callback: () -> ()): () -> ()
			reliable_events[2] = Callback
			for _ = 1, reliable_event_queue[2] do
				task.spawn(Callback)
			end
			reliable_event_queue[2] = 0
			return function()
				reliable_events[2] = nil
			end
		end,
	},
	CreateHint = {
		On = function(Callback: (Value: ({
			["Hint"]: ((string)?),
			["Color"]: ((unknown)),
			["Duration"]: ((string)?),
		})) -> ())
			table.insert(reliable_events[0], Callback)
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[0] = {}
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	ChangeMusic = {
		Fire = function(Value: ({
			["MusicId"]: ((string)?),
			["Volume"]: ((string)?),
			["StartTick"]: ((string)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			if Value["MusicId"] == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_3 = #Value["MusicId"]
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				alloc(len_3)
				buffer.writestring(outgoing_buff, outgoing_apos, Value["MusicId"], len_3)
			end
			if Value["Volume"] == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_4 = #Value["Volume"]
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				alloc(len_4)
				buffer.writestring(outgoing_buff, outgoing_apos, Value["Volume"], len_4)
			end
			if Value["StartTick"] == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_5 = #Value["StartTick"]
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
				alloc(len_5)
				buffer.writestring(outgoing_buff, outgoing_apos, Value["StartTick"], len_5)
			end
		end,
	},
	ChangeLighting = {
		Fire = function(Value: ({
			["Properties"]: (({ [(string)]: ((unknown)) })?),
			["PostEffects"]: (({ [(string)]: (({ [(string)]: ((unknown)) })?) })?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			if Value["Properties"] == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_1 = alloc(2)
				local len_6 = 0
				for k_1, v_1 in Value["Properties"] do
					len_6 = len_6 + 1
					local len_7 = #k_1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
					alloc(len_7)
					buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_7)
					if v_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, v_1)
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_6)
			end
			if Value["PostEffects"] == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_2 = alloc(2)
				local len_8 = 0
				for k_2, v_2 in Value["PostEffects"] do
					len_8 = len_8 + 1
					local len_9 = #k_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_9)
					alloc(len_9)
					buffer.writestring(outgoing_buff, outgoing_apos, k_2, len_9)
					if v_2 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_pos_3 = alloc(2)
						local len_10 = 0
						for k_3, v_3 in v_2 do
							len_10 = len_10 + 1
							local len_11 = #k_3
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_11)
							alloc(len_11)
							buffer.writestring(outgoing_buff, outgoing_apos, k_3, len_11)
							if v_3 == nil then
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 0)
							else
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, 1)
								table.insert(outgoing_inst, v_3)
							end
						end
						buffer.writeu16(outgoing_buff, len_pos_3, len_10)
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_8)
			end
		end,
	},
}
type Events = typeof(returns)
return returns
